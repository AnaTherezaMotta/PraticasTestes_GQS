package teste;

import static org.junit.Assert.*;


import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.mockito.Mockito; 
import org.junit.Before;
import org.junit.Test;
import loja.Produto;
import loja.Relatorio;

public class RelatorioTeste {

    private Relatorio relatorio;
    private List<Produto> produtos;

    @Before
    public void setUp() {
        produtos = new ArrayList<>();
    }

    @Test
    public void testCalcularTotal_ComDescontoVIP() {
        produtos.add(new Produto("Produto 1", 10, 2));
        produtos.add(new Produto("Produto 2", 20, 1));

        LocalDate mockDate = LocalDate.of(2024, 6, 25); // Data fixa para o teste
        relatorio = Mockito.spy(new Relatorio());
        Mockito.doReturn(mockDate).when(relatorio).getData();

        double total = relatorio.calcularTotal(produtos, true);

        assertEquals(42.5, total, 0.01);  // Considerando que não é domingo
    }

    @Test
    public void testCalcularTotal_ComDescontoNaoVIP() {
        produtos.add(new Produto("Produto 1", 10, 2));
        produtos.add(new Produto("Produto 2", 20, 1));

        LocalDate mockDate = LocalDate.of(2024, 6, 25); // Data fixa para o teste
        relatorio = Mockito.spy(new Relatorio());
        Mockito.doReturn(mockDate).when(relatorio).getData();

        double total = relatorio.calcularTotal(produtos, false);

        assertEquals(45.25, total, 0.01);  // Considerando que não é domingo
    }

    @Test
    public void testAplicarDesconto_ClienteVIP() {
        double total = 100.0;
        relatorio = new Relatorio(LocalDate.of(2024, 6, 25)); // Data fixa para o teste

        double totalComDesconto = relatorio.aplicarDesconto(total, true);
        assertEquals(90.0, totalComDesconto, 0.01);
    }

    @Test
    public void testAplicarDesconto_ClienteNaoVIP() {
        double total = 100.0;
        relatorio = new Relatorio(LocalDate.of(2024, 6, 25)); // Data fixa para o teste

        double totalComDesconto = relatorio.aplicarDesconto(total, false);
        assertEquals(95.0, totalComDesconto, 0.01);
    }

    @Test
    public void testAdicionarTaxaEntrega_DiaUtil() {
        LocalDate mockDate = LocalDate.of(2024, 6, 25); // Uma terça-feira
        relatorio = Mockito.spy(new Relatorio());
        Mockito.doReturn(mockDate).when(relatorio).getData();

        double total = 100.0;
        double totalComEntrega = relatorio.adicionarTaxaEntrega(total);
        assertEquals(105.0, totalComEntrega, 0.01);
    }

    @Test
    public void testAdicionarTaxaEntrega_Domingo() {
        LocalDate mockDate = LocalDate.of(2024, 6, 30); // Um domingo
        relatorio = Mockito.spy(new Relatorio());
        Mockito.doReturn(mockDate).when(relatorio).getData();

        double total = 100.0;
        double totalComEntrega = relatorio.adicionarTaxaEntrega(total);
        assertEquals(110.0, totalComEntrega, 0.01);
    }
}